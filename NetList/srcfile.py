#!/usr/local/bin/python3
#
# Copyright (c) 2021 Poul-Henning Kamp
# All rights reserved.
#
# Author: Poul-Henning Kamp <phk@phk.freebsd.dk>
#
# SPDX-License-Identifier: BSD-2-Clause
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

'''
   Turn kicad netlist files into SystemC source code
   =================================================
'''

import sys
import os

class SrcFile():
    ''' A C(++) language source file to be written '''
    def __init__(self, filename):
        self.filename = filename
        self.text = []
        self.includes = set()
        self.substitute = [
            ("\t\t|", ""),
        ]

    def write(self, text):
        ''' ... '''
        self.text.append(text)

    def fmt(self, text):
        ''' Substitute things into C-source text '''
        if text[0] == '\n':
            text = text[1:]
        for find, replace in self.substitute:
            text = text.replace(find, replace)
        if text[-2:] == '\n\n':
            text = text[:-1]
        self.text.append(text)

    def __iter__(self):
        yield self.filename
        for incl in self.includes:
            if isinstance(incl, SrcFile):
                yield from incl
            elif incl == "Chassis/planes.hh":
                yield incl
                yield "Chassis/plane_tbl.h"
            else:
                yield incl

    def include(self, target):
        ''' ... '''
        if target in self.includes:
            return
        self.includes.add(target)
        if isinstance(target, SrcFile):
            self.text.append('#include "' + target.filename + '"\n')
        else:
            self.text.append('#include "' + target + '"\n')

    def commit(self):
        ''' ... '''
        if not self.text:
            return
        ident = os.path.basename(sys.argv[0])
        suff = self.filename.split(".")[-1]
        prefix, suffix = {
            "h": ("/* ", " */\n"),
            "hh": ("/* ", " */\n"),
            "cc": ("/* ", " */\n"),
            "inc": ("# ", "\n"),
        }[suff]
        self.text.insert(
            0,
            prefix + "THIS FILE IS MACHINE GENERATED by " + ident + suffix,
        )
        now = "".join(self.text)
        try:
            was = open(self.filename, "r").read()
        except FileNotFoundError:
            was = ""
        if was != now:
            print("Changed:", self.filename)
            open(self.filename, "w").write(now)
