#ifndef R1000_F182
#define R1000_F182

// Carry Lookahead Generator
// Fairchild DS009492 April 1988 Revised June 2002


/*
lut = [0] * 512

def rule(p, v):
    p = p.replace('_', 'X')
    # print("R", p, "%02x" % v)
    i = p.split('X', 1)
    if len(i) == 1:
        p = p.replace('H', '1')
        p = p.replace('L', '0')
        lut[int(p, 2)] |= v
    else:
        rule(i[0] + "0" + i[1], v)
        rule(i[0] + "1" + i[1], v)

rule("XLX______", 0x10)
rule("HXL______", 0x10)
rule("XXXLX____", 0x08)
rule("XLXXL____", 0x08)
rule("HXLXL____", 0x08)
rule("XXXXXLX__", 0x04)
rule("XXXLXXL__", 0x04)
rule("XLXXLXL__", 0x04)
rule("HXLXLXL__", 0x04)
rule("_X_XXX_HH", 0x02)
rule("_X_XXHHHX", 0x02)
rule("_X_HHHXHX", 0x02)
rule("__H_X_X_X", 0x01)
rule("__X_H_X_X", 0x01)
rule("__X_X_H_X", 0x01)
rule("__X_X_X_H", 0x01)

for i in range(0, 512, 8):
    print("\t" + ", ".join("0x%02x" % lut[i + x] for x in range(8)) + ",")

*/

static unsigned lut182[512] = {
	0x1c, 0x1d, 0x1c, 0x1f, 0x1d, 0x1d, 0x1d, 0x1f,
	0x1c, 0x1d, 0x1c, 0x1f, 0x19, 0x19, 0x1b, 0x1b,
	0x1d, 0x1d, 0x1d, 0x1f, 0x1d, 0x1d, 0x1d, 0x1f,
	0x1d, 0x1d, 0x1d, 0x1f, 0x19, 0x19, 0x1b, 0x1b,
	0x1c, 0x1d, 0x1c, 0x1f, 0x1d, 0x1d, 0x1d, 0x1f,
	0x1c, 0x1d, 0x1c, 0x1f, 0x19, 0x19, 0x1b, 0x1b,
	0x15, 0x15, 0x15, 0x17, 0x15, 0x15, 0x15, 0x17,
	0x11, 0x11, 0x13, 0x13, 0x11, 0x11, 0x13, 0x13,
	0x1d, 0x1d, 0x1d, 0x1f, 0x1d, 0x1d, 0x1d, 0x1f,
	0x1d, 0x1d, 0x1d, 0x1f, 0x19, 0x19, 0x1b, 0x1b,
	0x1d, 0x1d, 0x1d, 0x1f, 0x1d, 0x1d, 0x1d, 0x1f,
	0x1d, 0x1d, 0x1d, 0x1f, 0x19, 0x19, 0x1b, 0x1b,
	0x1d, 0x1d, 0x1d, 0x1f, 0x1d, 0x1d, 0x1d, 0x1f,
	0x1d, 0x1d, 0x1d, 0x1f, 0x19, 0x19, 0x1b, 0x1b,
	0x15, 0x15, 0x15, 0x17, 0x15, 0x15, 0x15, 0x17,
	0x11, 0x11, 0x13, 0x13, 0x11, 0x11, 0x13, 0x13,
	0x0c, 0x0d, 0x0c, 0x0f, 0x0d, 0x0d, 0x0d, 0x0f,
	0x0c, 0x0d, 0x0c, 0x0f, 0x09, 0x09, 0x0b, 0x0b,
	0x0d, 0x0d, 0x0d, 0x0f, 0x0d, 0x0d, 0x0d, 0x0f,
	0x0d, 0x0d, 0x0d, 0x0f, 0x09, 0x09, 0x0b, 0x0b,
	0x04, 0x05, 0x04, 0x07, 0x05, 0x05, 0x05, 0x07,
	0x00, 0x01, 0x00, 0x03, 0x01, 0x01, 0x03, 0x03,
	0x05, 0x05, 0x05, 0x07, 0x05, 0x05, 0x05, 0x07,
	0x01, 0x01, 0x03, 0x03, 0x01, 0x01, 0x03, 0x03,
	0x0d, 0x0d, 0x0d, 0x0f, 0x0d, 0x0d, 0x0d, 0x0f,
	0x0d, 0x0d, 0x0d, 0x0f, 0x09, 0x09, 0x0b, 0x0b,
	0x0d, 0x0d, 0x0d, 0x0f, 0x0d, 0x0d, 0x0d, 0x0f,
	0x0d, 0x0d, 0x0d, 0x0f, 0x09, 0x09, 0x0b, 0x0b,
	0x05, 0x05, 0x05, 0x07, 0x05, 0x05, 0x05, 0x07,
	0x01, 0x01, 0x01, 0x03, 0x01, 0x01, 0x03, 0x03,
	0x05, 0x05, 0x05, 0x07, 0x05, 0x05, 0x05, 0x07,
	0x01, 0x01, 0x03, 0x03, 0x01, 0x01, 0x03, 0x03,
	0x1c, 0x1d, 0x1c, 0x1f, 0x1d, 0x1d, 0x1d, 0x1f,
	0x1c, 0x1d, 0x1c, 0x1f, 0x19, 0x19, 0x1b, 0x1b,
	0x1d, 0x1d, 0x1d, 0x1f, 0x1d, 0x1d, 0x1d, 0x1f,
	0x1d, 0x1d, 0x1d, 0x1f, 0x19, 0x19, 0x1b, 0x1b,
	0x1c, 0x1d, 0x1c, 0x1f, 0x1d, 0x1d, 0x1d, 0x1f,
	0x1c, 0x1d, 0x1c, 0x1f, 0x19, 0x19, 0x1b, 0x1b,
	0x15, 0x15, 0x15, 0x17, 0x15, 0x15, 0x15, 0x17,
	0x11, 0x11, 0x13, 0x13, 0x11, 0x11, 0x13, 0x13,
	0x1d, 0x1d, 0x1d, 0x1f, 0x1d, 0x1d, 0x1d, 0x1f,
	0x1d, 0x1d, 0x1d, 0x1f, 0x19, 0x19, 0x1b, 0x1b,
	0x1d, 0x1d, 0x1d, 0x1f, 0x1d, 0x1d, 0x1d, 0x1f,
	0x1d, 0x1d, 0x1d, 0x1f, 0x19, 0x19, 0x1b, 0x1b,
	0x1d, 0x1d, 0x1d, 0x1f, 0x1d, 0x1d, 0x1d, 0x1f,
	0x1d, 0x1d, 0x1d, 0x1f, 0x19, 0x19, 0x1b, 0x1b,
	0x15, 0x15, 0x15, 0x17, 0x15, 0x15, 0x15, 0x17,
	0x11, 0x11, 0x13, 0x13, 0x11, 0x11, 0x13, 0x13,
	0x1c, 0x1d, 0x1c, 0x1f, 0x1d, 0x1d, 0x1d, 0x1f,
	0x1c, 0x1d, 0x1c, 0x1f, 0x19, 0x19, 0x1b, 0x1b,
	0x1d, 0x1d, 0x1d, 0x1f, 0x1d, 0x1d, 0x1d, 0x1f,
	0x1d, 0x1d, 0x1d, 0x1f, 0x19, 0x19, 0x1b, 0x1b,
	0x1c, 0x1d, 0x1c, 0x1f, 0x1d, 0x1d, 0x1d, 0x1f,
	0x1c, 0x1d, 0x1c, 0x1f, 0x19, 0x19, 0x1b, 0x1b,
	0x15, 0x15, 0x15, 0x17, 0x15, 0x15, 0x15, 0x17,
	0x11, 0x11, 0x13, 0x13, 0x11, 0x11, 0x13, 0x13,
	0x0d, 0x0d, 0x0d, 0x0f, 0x0d, 0x0d, 0x0d, 0x0f,
	0x0d, 0x0d, 0x0d, 0x0f, 0x09, 0x09, 0x0b, 0x0b,
	0x0d, 0x0d, 0x0d, 0x0f, 0x0d, 0x0d, 0x0d, 0x0f,
	0x0d, 0x0d, 0x0d, 0x0f, 0x09, 0x09, 0x0b, 0x0b,
	0x05, 0x05, 0x05, 0x07, 0x05, 0x05, 0x05, 0x07,
	0x01, 0x01, 0x01, 0x03, 0x01, 0x01, 0x03, 0x03,
	0x05, 0x05, 0x05, 0x07, 0x05, 0x05, 0x05, 0x07,
	0x01, 0x01, 0x03, 0x03, 0x01, 0x01, 0x03, 0x03,
};

struct scm_f182_state;

SC_MODULE(SCM_F182)
{
	sc_in <sc_logic>	pin1;	// G1_ - G2 (input)
	sc_in <sc_logic>	pin2;	// P1_ - P2 (input)
	sc_in <sc_logic>	pin3;	// G0_ - G3 (input)
	sc_in <sc_logic>	pin4;	// P0_ - P3 (input)
	sc_in <sc_logic>	pin5;	// G3_ - G0 (input)
	sc_in <sc_logic>	pin6;	// P3_ - P0 (input)
	sc_out <sc_logic>	pin7;	// P_ - CP (output)
	sc_out <sc_logic>	pin9;	// CN+Z - CO1_ (output)
	sc_out <sc_logic>	pin10;	// G_ - CG (output)
	sc_out <sc_logic>	pin11;	// CN+Y - CO2_ (output)
	sc_out <sc_logic>	pin12;	// CN+X - CO3_ (output)
	sc_in <sc_logic>	pin13;	// CN - C1_ (input)
	sc_in <sc_logic>	pin14;	// G2_ - G1 (input)
	sc_in <sc_logic>	pin15;	// P2_ - P1 (input)

	SC_HAS_PROCESS(SCM_F182);

	SCM_F182(sc_module_name nm, const char *arg) : sc_module(nm)
	{
		SC_METHOD(doit);
		sensitive << pin1 << pin2 << pin3 << pin4 << pin5 << pin6
			  << pin13 << pin14 << pin15;
		loadit(arg);
	}

	private:
	struct scm_f182_state *state;
	void loadit(const char *arg);

	void doit(void);
};

#endif /* R1000_F182 */
